import pandas as pd
import numpy as np
import requests
import json
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from tqdm import tqdm

# 配置参数
api_key = "sk-cqmbzsrduocuwebkbjgixiugrcnwwzfihlhcjmesqsapdhul"
base_url = "https://api.siliconflow.cn/v1"
EXCEL_PATH = "data.xlsx"
MODEL_NAME = "ft:LoRA/Qwen/Qwen2.5-7B-Instruct:yok9x3mcov:predict1:rwqmskiqvgylngwczitp-ckpt_step_450"
WINDOW_SIZE = 24
MAX_RETRIES = 3

def prepare_data():
    df = pd.read_excel(EXCEL_PATH)
    target_col = df.select_dtypes(include=np.number).columns[0]
    train = df[target_col].iloc[:-1210].values.astype(np.float32)
    valid = df[target_col].iloc[-1210 - WINDOW_SIZE:].values.astype(np.float32)
    
    scaler = StandardScaler()
    train_scaled = scaler.fit_transform(train.reshape(-1, 1))
    valid_scaled = scaler.transform(valid.reshape(-1, 1))    
    return scaler, train_scaled, valid_scaled

def create_sequences(data, window_size):
    X, y = [], []
    for i in range(len(data)-window_size):
        X.append(data[i:i+window_size])
        y.append(data[i+window_size])
    return np.array(X).squeeze(), np.array(y).squeeze()

def trend_analysis(sequence):
    short_window = sequence[-5:]  # 短期趋势分析
    long_window = sequence[-15:]  # 长期趋势分析
    
    # 计算斜率变化率
    short_slope = np.polyfit(np.arange(5), short_window, 1)[0]
    long_slope = np.polyfit(np.arange(15), long_window, 1)[0]
    volatility = np.std(long_window) * 1.5  # 波动率阈值    
    trend_strength = abs(short_slope - long_slope)
    is_trend_change = trend_strength > volatility    
    direction = 1 if (0.6*short_slope + 0.4*long_slope) > 0 else -1    
    return is_trend_change, direction, abs(short_slope)

def adaptive_predictor(history):
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    trend_change, direction, strength = trend_analysis(history)
    if trend_change:
        if direction > 0:
            prompt = f"""WARNING: Significant upward trend detected (strength: {strength:.3f})
Predict next value with appropriate increase. Consider momentum.
Last 5 values: {history[-5:]}
Output format: 0.123
Prediction: """
            adjustment = 1 + min(0.65, strength * 2.5)  # 动态调整系数
        else:
            prompt = f"""WARNING: Significant downward trend detected (strength: {strength:.3f})
Predict next value with appropriate decrease. Consider momentum.
Last 5 values: {history[-5:]}
Output format: 0.123
Prediction: """
            adjustment = 1 - min(0.5, strength * 2)
        temperature = 0.4  
    else:
        prompt = f"""Predict next value within normal fluctuation. 
Last 8 values: {history[-8:]}
Output format: 0.456
Prediction: """
        adjustment = 1.0
        temperature = 0.1  
    
    for _ in range(MAX_RETRIES):
        try:
            response = requests.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json={
                    "model": MODEL_NAME,
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": temperature,
                    "max_tokens": 15
                },
                timeout=35
            )
            
            if response.status_code == 200:
                content = json.loads(response.text)['choices'][0]['message']['content']
                numbers = []
                for s in content.replace(',',' ').split():
                    if s.count('.') < 2 and s.replace('.','',1).lstrip('-').isdigit():
                        numbers.append(float(s))
                if numbers:
                    raw_pred = numbers[0]
                    adjusted_pred = raw_pred * adjustment
                    baseline = np.mean(history[-10:])
                    bound = np.std(history[-10:]) * 3.8
                    final_pred = max(baseline - bound, min(baseline + bound, adjusted_pred))
                    return final_pred
        except Exception as e:
            continue
    return 0.8 * np.mean(history[-3:]) + 0.2 * np.mean(history[-10:-5])

def main():
    scaler, train_scaled, valid_scaled = prepare_data()
    X_valid, y_valid = create_sequences(valid_scaled, WINDOW_SIZE)
   
    predictions = []
    for seq in tqdm(X_valid, desc="Predicting"):
        pred = adaptive_predictor(seq)
        predictions.append(pred)
    
    predictions = scaler.inverse_transform(np.array(predictions).reshape(-1,1))
    y_true = scaler.inverse_transform(y_valid.reshape(-1,1))
    
    delta = np.abs(y_true - predictions)
    relative_error = delta / (np.abs(y_true) + 1e-8)  
    p50_error = np.percentile(relative_error, 50)
    p95_error = np.percentile(relative_error, 95)
    
    print(f"\n=== 改进评估结果 ===")
    print(f"MAE: {mean_absolute_error(y_true, predictions):.4f}")
    print(f"RMSE: {np.sqrt(mean_squared_error(y_true, predictions)):.4f}")
    print(f"中位数相对误差: {p50_error*100:.2f}%")
    print(f"95分位相对误差: {p95_error*100:.2f}%")


    results_df = pd.DataFrame({
        'True_Value': y_true.squeeze(),
        'Predicted_Value': predictions.squeeze()
    })
    
    from datetime import datetime
    filename = f"423predictions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    results_df.to_excel(filename, index=False)
    print(f"\n预测结果已保存至: {filename}")

  
    plt.figure(figsize=(24, 12))
   
    plt.subplot(2,1,1)
    plt.plot(y_true, label='true', color='dodgerblue', alpha=0.8)
    plt.plot(predictions, label='predict', color='darkorange', linestyle='--')
    plt.fill_between(range(len(predictions)), 
                    (predictions*0.95).squeeze(), 
                    (predictions*1.05).squeeze(), 
                    color='orange', alpha=0.1)
    plt.title("全局趋势对比（含5%预测区间）", fontsize=14)
    plt.legend()
    
    plt.subplot(2,1,2)
    error = (predictions - y_true).squeeze()
    plt.plot(error, color='green', alpha=0.6, label='预测误差')
    plt.axhline(0, color='red', linestyle='--')
    plt.title("预测误差动态分布", fontsize=14)
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('1enhanced_prediction.png', dpi=300, bbox_inches='tight')
    plt.show()

if __name__ == "__main__":
    main()